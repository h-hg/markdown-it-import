import{_ as o,o as r,c,a as n,w as s,b as d,d as e,e as t,r as a}from"../app.cd6d049e.mjs";const u={},m=d(`<h1 id="markdown-it-import" tabindex="-1"><a class="header-anchor" href="#markdown-it-import" aria-hidden="true">#</a> Markdown-it-import</h1><p>An extensible Markdown-it plugin to import external files.</p><p><strong>Attension</strong>: To be compatible with VuePress v2, markdown-it-import is now released as pure ESM packages.</p><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h2><p>Currently, it supports the following files</p><ul><li>Markdown files: Similar to <code>#include</code> of C language, the nested import is supported.</li><li>Code snippets</li></ul><p>What&#39;s more, transclusion is also supported, like lines, fragement tags and regular expression.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> i vuepress@next markdown-it-import <span class="token parameter variable">-S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>configure your <code>config.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> markdownItImport <span class="token keyword">from</span> <span class="token string">&#39;markdown-it-import&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">extendsMarkdown</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">md</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    md<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>markdownItImport<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>Using <code>@import(type, importPath, optional)</code> in your markdown files, just like you call javascript function.</p><ul><li><code>type</code>: <code>string</code></li><li><code>path</code>: <code>string</code></li><li><code>others</code>: Javascript Object</li></ul><h3 id="import-markdown" tabindex="-1"><a class="header-anchor" href="#import-markdown" aria-hidden="true">#</a> Import Markdown</h3><p>Exclusive options:</p><ul><li><code>recursive</code>: <code>bool</code>, whether to import recursively, default to <code>true</code></li></ul><p>Import markdown files without recursion.</p>`,18),p=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,"@import('md', './test/simple-md-import.md', {recursive: false})")]),e("div",{class:"line-numbers","aria-hidden":"true"})],-1),v=e("div",{class:"language-markdown ext-md line-numbers-mode"},[e("pre",{class:"language-markdown"},[e("code",null,`This is a simple markdown file, and it will import another markdown file.

The imported content is as follows:

@import('md', './imported.md')`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),g=e("p",null,"Import markdown files recursively.",-1),h=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,"@import('md', './test/simple-md-import.md')")]),e("div",{class:"line-numbers","aria-hidden":"true"})],-1),b=e("div",{class:"language-text ext-text line-numbers-mode"},[e("pre",{class:"language-text"},[e("code",null,`This is a simple markdown file, and it will import another markdown file.

The imported content is as follows:

This is what will be imported.
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),x=e("div",{class:"language-markdown ext-md line-numbers-mode"},[e("pre",{class:"language-markdown"},[e("code",null,"This is what will be imported.")]),e("div",{class:"line-numbers","aria-hidden":"true"})],-1),_=e("h3",{id:"import-code",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#import-code","aria-hidden":"true"},"#"),t(" Import code")],-1),f=e("p",null,"Exclusive options:",-1),k=e("ul",null,[e("li",null,[e("code",null,"lang"),t(": "),e("code",null,"string"),t(", the type of the language, default to the extension of file name.")])],-1),w=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,"@import('code', './test/helloworld.js', {lang: 'js'})")]),e("div",{class:"line-numbers","aria-hidden":"true"})],-1),y=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[t("console"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"log"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'Hello World'"),e("span",{class:"token punctuation"},")")])]),e("div",{class:"line-numbers","aria-hidden":"true"})],-1),M=d(`<h3 id="using-the-transclusion-parameter" tabindex="-1"><a class="header-anchor" href="#using-the-transclusion-parameter" aria-hidden="true">#</a> Using the transclusion parameter</h3><p>Options of transclusion (in order of precedence):</p><ul><li><code>lines</code>: <code>Array</code>, the line number you want to import</li><li><code>fragement</code>: <code>string</code>, the lines between <code>fragement</code> will be imported</li><li><code>regex</code>: <code>Regex</code>, the lines match the <code>regex</code> will be imported</li></ul><p>The entire content of <code>./test/lines.txt</code> is as follows</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>line 1
# tag1
line 3
line 4
# tag1
line 6
# tag2
line 8
line 9
line 10
line 11
line 12
line 13
line 14
line 15
line 16
line 17
# tag2
line 19
line 20
line 21</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Import lines 3 to 8</p>`,6),I=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,"@import('code', './test/lines.text', {lang: 'text', lines: [3, 8]})")]),e("div",{class:"line-numbers","aria-hidden":"true"})],-1),j=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,`line 3
line 4
# tag1
line 6
# tag2
line 8`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),S=e("p",null,"Import lines 1, 3 to 5, and 8",-1),C=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,"@import('code', './test/lines.text', {lang: 'text', lines: [1, [3, 5], 8]})")]),e("div",{class:"line-numbers","aria-hidden":"true"})],-1),P=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,`line 1
line 3
line 4
# tag1
line 8`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),T=e("p",null,[t("Import the content between "),e("code",null,"# tag1")],-1),E=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,"@import('code', './test/lines.text', {lang: 'text', fragment: '# tag1'})")]),e("div",{class:"line-numbers","aria-hidden":"true"})],-1),V=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,`line 3
line 4`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),G=e("p",null,"Using regular expression to import lines 10 to 19",-1),N=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,"@import('code', './test/lines.text', {lang: 'text', regex: /line\\s1[0-9]/})")]),e("div",{class:"line-numbers","aria-hidden":"true"})],-1),U=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,`line 10
line 11
line 12
line 13
line 14
line 15
line 16
line 17
line 19`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),A=e("p",null,"Complex transclusion",-1),B=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,"@import('code', './test/lines.text', {lang: 'text', line: [6, 20], fragment: '# tag2', regex: /line\\s[0-9]$/})")]),e("div",{class:"line-numbers","aria-hidden":"true"})],-1),O=e("div",{class:"language-txt ext-txt line-numbers-mode"},[e("pre",{class:"language-txt"},[e("code",null,`line 8
line 9`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1);function W(F,H){const i=a("CodeGroupItem"),l=a("CodeGroup");return r(),c("div",null,[m,n(l,null,{default:s(()=>[n(i,{title:"Markdown Source"},{default:s(()=>[p]),_:1}),n(i,{title:"Preview"},{default:s(()=>[v]),_:1})]),_:1}),g,n(l,null,{default:s(()=>[n(i,{title:"Markdown Source"},{default:s(()=>[h]),_:1}),n(i,{title:"Preview"},{default:s(()=>[b]),_:1}),n(i,{title:"/test/imported.md"},{default:s(()=>[x]),_:1})]),_:1}),_,f,k,n(l,null,{default:s(()=>[n(i,{title:"Markdown Source"},{default:s(()=>[w]),_:1}),n(i,{title:"Preview"},{default:s(()=>[y]),_:1})]),_:1}),M,n(l,null,{default:s(()=>[n(i,{title:"Markdown Source"},{default:s(()=>[I]),_:1}),n(i,{title:"Preview"},{default:s(()=>[j]),_:1})]),_:1}),S,n(l,null,{default:s(()=>[n(i,{title:"Markdown Source"},{default:s(()=>[C]),_:1}),n(i,{title:"Preview"},{default:s(()=>[P]),_:1})]),_:1}),T,n(l,null,{default:s(()=>[n(i,{title:"Markdown Source"},{default:s(()=>[E]),_:1}),n(i,{title:"Preview"},{default:s(()=>[V]),_:1})]),_:1}),G,n(l,null,{default:s(()=>[n(i,{title:"Markdown Source"},{default:s(()=>[N]),_:1}),n(i,{title:"Preview"},{default:s(()=>[U]),_:1})]),_:1}),A,n(l,null,{default:s(()=>[n(i,{title:"Markdown Source"},{default:s(()=>[B]),_:1}),n(i,{title:"Preview"},{default:s(()=>[O]),_:1})]),_:1})])}const R=o(u,[["render",W],["__file","index.html.vue"]]);export{R as default};
